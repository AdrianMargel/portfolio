class ProjectPage extends CustomElm{
	constructor(){
		super();
		this.define(html`
			${new Surface(html`
				<h2>Overview</h2>
				<p class="center bold projectLink"><a href="https://github.com/AdrianMargel/runes">Github</a></p>
				${new ImageDisplay("img/gold_runes2.png")}
				<p>
					This program procedurally generates runes. The runes are generated by creating a small number of grid of points and then randomly creating lines that connect those points. The only condition is that the lines must exist along one of a set of predetermined alignments. After the rune is generated it is tested to make sure that at least one line touches every edge of the grid. If this condition is met the rune is saved otherwise a new one is created until one that meets this condition is found.</p>
				</p>
			`,"lg",false,true)}
			<div class="gap"></div>
			${new Surface(html`
				<h2>Inspiration</h2>
				<p>
					This was inspired in part by this old <a href="https://www.reddit.com/r/proceduralgeneration/comments/5wzo7j/monthly_challenge_16_march_2017_procedural_runes/">reddit post</a> but primarily by this <a href="https://www.shadertoy.com/view/MsXSRn">shaddertoy demo</a>.
				</p>
			`,"lg")}
		`);
	}
}
defineElm(ProjectPage,scss`&{
	width: 100%;
	>.gap{
		height: 40px;
	}
	p.center{
		${theme.centerText}
	}
	.bold{
		font-weight: 700;
	}
	.projectLink{
		a{
			padding: 5px 10px;
			background-color: ${theme.color.greyStep(-2)};
			border-radius: 50px;
		}
	}
}`);

let title=bind("Runes");
let page=bind(null);
page.data=bind({
	content: new ProjectPage()
});